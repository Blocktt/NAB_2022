#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
# Define server logic

server <- function(input, output, session) {
  
  # DataViz ####
  
  myData <- reactive({
    df_trim %>%
      select(DistCat, BenSampID, CollDate, Station_ID, Longitude, Latitude
             , input$Enviro_Choice1, input$Bug_Choice1)
  }) # reactive
  
  ## SR plot ####
  output$S_R_Plot <- renderPlotly({
    
    # filter data
    plot_data <- myData()
    plot_data$DistCat <- as.factor(plot_data$DistCat)
    
    # create color scale
    pal <- c("Ref" = "#2c7bb6"
             ,"MidStrs" = "#fdae61"
             ,"HighStrs" = "#d7191c")
    
    # create plot
    plot_ly(data = plot_data, x = ~get(input$Enviro_Choice1)
            , y = ~get(input$Bug_Choice1)
            , color = ~DistCat, colors = pal, symbol = ~DistCat
            , type = "scatter", mode = "markers"
            , symbols = c('circle','x','o'), marker = list(size = 10)
            ,# Hover text:
            text = ~paste("BenSampID: ", BenSampID
                          , '<br>CollDate:', CollDate
                          , '<br>Station_ID:', Station_ID
                          , '<br>Longitude:', Longitude
                          , '<br>Latitude:', Latitude)
            ) %>% 
      layout(xaxis = list(title = input$Enviro_Choice1)
             , yaxis = list(title = input$Bug_Choice1)
             , legend = list(title=list(text='<b> DistCat </b>')))
  }) # renderPlot
  
  ## Table ####
  # https://plotly-r.com/linking-views-with-shiny.html#shiny-plotly-inputs
  output$mytable = DT::renderDataTable({
    myData()
  }) #renderDataTable
  
  ## Map ####
  
  output$mymap <- renderLeaflet({
    
    df_data4Map <- myData()
    
    # create Dist Cat palette
    
    DistCatPal <- ifelse(df_data4Map$DistCat == "Ref", "Ref",
                         ifelse(df_data4Map$DistCat == "MidStrs", "MidStrs"
                                , "HighStrs"))
    
    DistCatPal <- factor(DistCatPal, levels = c("Ref"
                                                ,"MidStrs"
                                                ,"HighStrs"))
    
    
    pal <- colorFactor(
      palette = c('green', 'orange', 'red'),
      domain = DistCatPal,
      ordered = TRUE)

    # Main map
    
    leaflet() %>%
      addTiles() %>%
      addProviderTiles(providers$Esri.WorldStreetMap, group="Esri WSM") %>%
      addProviderTiles("CartoDB.Positron", group="Positron") %>%
      addProviderTiles(providers$Stamen.TonerLite, group="Toner Lite")  %>%
      # addPolygons(data = IL_BugClasses
      #             , color = "green"
      #             , weight = 3
      #             , fill = FALSE
      #             , label = IL_BugClasses$Site_Class
      #             , group = "Bug Site Classes"
      #             
      # ) %>%
      addCircleMarkers(data = df_data4Map, lat = ~Latitude, lng = ~Longitude
                       , group = "North", popup = paste("BenSampID: ", df_data4Map$BenSampID
                                                        ,"CollDate:", df_data4Map$CollDate
                                                        ,"Station_ID:", df_data4Map$Station_ID
                                                        ,"IBI_Score:", df_data4Map$IBI_Score)
                       , color = "black", fillColor = ~pal(DistCat), fillOpacity = 1, stroke = TRUE
                       , clusterOptions = markerClusterOptions()
                       
      ) %>%
      addLegend(pal = pal,
                values = DistCatPal,
                position = "bottomright",
                title = "DistCat",
                opacity = 1) %>%
      addLayersControl(baseGroups = c("Esri WSM", "Positron", "Toner Lite"),
                       options = layersControlOptions(collapsed = TRUE))%>%
      # hideGroup(c("Bug Site Classes")) %>%
      addMiniMap(toggleDisplay = TRUE, tiles = providers$Esri.WorldStreetMap)
  }) ##renderLeaflet~END
  
  
  # Presentation ####

  getPageDoc <- function() {
    return(includeHTML("www/gesrmarkdown.html"))
  }
  output$doc <- renderUI({
    getPageDoc()
  })
  
  
  # StoryMaps ####
  
  ## Technical ####
  #https://stackoverflow.com/questions/33020558/embed-iframe-inside-shiny-app
  #https://stackoverflow.com/questions/59628035/r-shiny-how-to-fill-out-the-entire-space-of-the-browser-window-with-an-iframe
  output$StoryMap_Tech <- renderUI({
    Technical <- paste0("https://storymaps.arcgis.com/stories/f8d9ce1ca4a24bcda99c1b780ae85179")
    # my_test <- tags$iframe(src=test, height=800, width=1535)
    my_Technical <- tags$iframe(src=Technical, style='width:90vw;height:90vh;')
    my_Technical
  })## renderUI ~ END
  
  output$StoryMap_NonTech <- renderUI({
    NonTechnical <- paste0("https://storymaps.arcgis.com/stories/a70626f4c03e425ea9b3eecc5098f54b")
    # my_test <- tags$iframe(src=test, height=800, width=1535)
    my_NonTechnical <- tags$iframe(src=NonTechnical, style='width:90vw;height:90vh;')
    my_NonTechnical
  })## renderUI ~ END
}